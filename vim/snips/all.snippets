
#===============================================================================
# qt project
#===============================================================================
snippet qpro "qmake pro file"
QT += core gui
greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

TEMPLATE = app
CONFIG  += c++11

# debug, release, debug_and_release
CONFIG += debug
CONFIG -= release
CONFIG(debug, debug|release) {
    TARGET      = ${1:project-name}
    OBJECTS_DIR = debug
} else {
    TARGET      = $1
    OBJECTS_DIR = release
    DEFINES    += QT_NO_WARNING_OUTPUT \
                QT_NO_DEBUG_OUTPUT
}
#DESTDIR = $$OBJECTS_DIR/../
MOC_DIR  = $$OBJECTS_DIR/moc
UI_DIR   = $$OBJECTS_DIR/ui
RCC_DIR  = $$OBJECTS_DIR/rcc

#INCLUDEPATH +=
#LIBS        +=
unix {
    #LIBS += \`pkg-config --libs \`
}

#PRECOMPILED_HEADER = pch.h
SOURCES    += \
	main.cpp
#HEADERS   += .h
#FORMS     += .ui
#RESOURCES += .qrc
#TRANSLATIONS += lang/lang_zh_cn.ts	\
#                lang/lang_en.ts
endsnippet

snippet qproc "qmake pro console file"
QT += core
QT -= gui

TEMPLATE = app
CONFIG  += c++11 console

# debug, release, debug_and_release
CONFIG += debug
CONFIG -= release
CONFIG(debug, debug|release) {
    TARGET      = ${1:project-name}
    OBJECTS_DIR = debug
} else {
    TARGET      = $1
    OBJECTS_DIR = release
    DEFINES    += QT_NO_WARNING_OUTPUT \
                QT_NO_DEBUG_OUTPUT
}
#DESTDIR = $$OBJECTS_DIR/../
MOC_DIR  = $$OBJECTS_DIR/moc
UI_DIR   = $$OBJECTS_DIR/ui
RCC_DIR  = $$OBJECTS_DIR/rcc

#INCLUDEPATH +=
#LIBS        +=
unix {
    #LIBS += \`pkg-config --libs \`
}

#PRECOMPILED_HEADER = pch.h
SOURCES    += \
	main.cpp
#HEADERS   += .h
endsnippet

snippet qcpp "qmake pro only for c/c++"
TEMPLATE = app
CONFIG  -= qt
CONFIG  -= app_bundle
CONFIG  += c++11 console

# debug, release, debug_and_release
CONFIG += debug
CONFIG -= release
CONFIG(debug, debug|release) {
    TARGET      = ${1:project-name}
    OBJECTS_DIR = debug
} else {
    TARGET      = $1
    OBJECTS_DIR = release
}
#DESTDIR = $$OBJECTS_DIR/../
MOC_DIR  = $$OBJECTS_DIR/moc
UI_DIR   = $$OBJECTS_DIR/ui
RCC_DIR  = $$OBJECTS_DIR/rcc

#INCLUDEPATH +=
#LIBS        +=
unix {
    #LIBS += \`pkg-config --libs \`
}

#PRECOMPILED_HEADER = pch.h
SOURCES    += \
	main.cpp
#HEADERS   += .h
endsnippet

snippet qcudapp "qmake for cuda application"
TEMPLATE = app
CONFIG  -= qt
CONFIG  -= app_bundle
CONFIG  += c++11 console

# debug, release, debug_and_release
CONFIG += debug
CONFIG -= release
CONFIG(debug, debug|release) {
    TARGET      = ${1:project-name}
    OBJECTS_DIR = debug
} else {
    TARGET      = $1
    OBJECTS_DIR = release
}
#DESTDIR = $$OBJECTS_DIR/../
MOC_DIR  = $$OBJECTS_DIR/moc
UI_DIR   = $$OBJECTS_DIR/ui
RCC_DIR  = $$OBJECTS_DIR/rcc

#INCLUDEPATH +=
#LIBS +=
unix {
	#INCLUDEPATH += -I/usr/include/GL
    #LIBS += \`pkg-config --libs gl glu freeglut\`
}

#HEADERS   += .h

#===============================================================================
# build as cuda application in linux
#===============================================================================
CONFIG(release, debug|release): CUDA_OBJECTS_DIR = $$OBJECTS_DIR/cuda
else: CUDA_OBJECTS_DIR = $$OBJECTS_DIR/cuda

CUDA_TARGET = $$TARGET
CUDA_SOURCES += $0

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# cuda settings
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CUDA_DIR    = /opt/cuda
CUDA_INC    = $$CUDA_DIR/include \
              $$CUDA_DIR/samples/common/inc
CUDA_LIBDIR = $$CUDA_DIR/lib64
CUDA_LIBS   = cudart cuda

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# cuda nvcc settings
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CUDA_NVCC   = $$CUDA_DIR/bin/nvcc -ccbin g++
NVCC_INC   += $$join(CUDA_INC, '" -I"', '-I"', '"') \
              $$INCLUDEPATH
NVCC_LIBS  += $$join(CUDA_LIBS, ' -l', '-l', '') \
              $$LIBS
NVCC_ARCH   = sm_61
NVCC_FLAGS  = -use_fast_math -arch=$$NVCC_ARCH -m64

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# add compiler
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
QMAKE_LIBDIR += $$CUDA_LIBDIR
cuda.input    = CUDA_SOURCES
cuda.output   = $$CUDA_OBJECTS_DIR/${QMAKE_FILE_BASE}_cuda.o
cuda.commands = $$CUDA_NVCC \
                $$NVCC_FLAGS $$NVCC_INC $$NVCC_LIBS \
                -c -o ${QMAKE_FILE_OUT} ${QMAKE_FILE_NAME}
cuda.depend_type = TYPE_C
QMAKE_EXTRA_COMPILERS += cuda

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# add target, link ${OBJECTS} in makefile
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cudapp.target   = $$CUDA_TARGET
cudapp.commands = $$CUDA_NVCC \
                $$NVCC_FLAGS $$NVCC_INC $$NVCC_LIBS \
                -o $$CUDA_TARGET ${OBJECTS}
QMAKE_EXTRA_TARGETS += cudapp
endsnippet


#===============================================================================
# makefile
#===============================================================================
snippet mkf "makefile template"
#===============================================================================
# dir
#===============================================================================
DIR_INC := ./inc
DIR_SRC := ./src
DIR_OBJ := ./obj
DIR_BIN := .

#===============================================================================
# settings
#===============================================================================
define make_dir
	$(foreach str, \
		$(addprefix ${DIR_OBJ}/,${DIR_SRC}), \
		$(shell mkdir -p ${str}))
endef
$(call make_dir)

## get src files from dirs with suffixs: (#dirs, #suffixs)
get_src = $(filter $(addprefix %.,$(2)),$(wildcard $(addsuffix /*,$(1))))

## get suffix files in dir from files: (#dir, #suffix, #files)
get_suf = $(addprefix $(1)/,$(addsuffix .$(2),$(basename $(3))))

## create obj target: (#obj_dir, #src_files, #cxxflags)
define do_create_obj_target
$(1)/$(basename $(2)).o: $(2)
	$(CC) -c $$< $(3) -o $$@ -MD -MP -MT $$@ -MT $$*.d -MF $$*.d
endef
create_obj_target = $(foreach line,$(2),$(eval $(call do_create_obj_target,$(1),$(line),$(3))))

CC         := ${1:g++}
CTAGS      := ctags
TARGET     := ${2:main}
ifeq (${CC}, g++)
CC_SUF     := c cc cpp cxx
else
CC_SUF     := c cc
endif
BIN        := ${DIR_BIN}/${TARGET}
SRC        := $(call get_src,${DIR_SRC},${CC_SUF})
OBJ        := $(call get_suf,${DIR_OBJ},o,${SRC})
DEP        := $(call get_suf,${DIR_OBJ},d,${SRC})
LIBS       :=
#-lpthread \`pkg-config opencv --libs\`
PKGFLAGS   :=
#\`pkg-config opencv --cflags\`
CXXFLAGS   := -g -Wall
CXXFLAGS   += $(addprefix -I, $(DIR_INC))
CXXFLAGS   += ${PKGFLAGS}
LDFLAGS    := ${LIBS}

#===============================================================================
# target
#===============================================================================
${BIN}: ${OBJ}
	${CC} $^ -o $@ ${CXXFLAGS} ${LDFLAGS}

$(call create_obj_target,${DIR_OBJ},${SRC},${CXXFLAGS})

-include ${DEP}

tags:
	${CTAGS} -R ${SRC} ${DIR_INC}

.PHONY: clean
clean:
	-rm -r ${DIR_OBJ}
	-rm ${BIN}
endsnippet

snippet cmk "cmake template"
cmake_minimum_required(VERSION 3.5)

#set(CMAKE_C_COMPILER "clang")
#set(CMAKE_CXX_COMPILER "clang++")
#set(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -g")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
project(${1:main} LANGUAGES ${2:CXX})

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

#set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR})
set(DIR_INC
    ${CMAKE_CURRENT_SOURCE_DIR}/inc
)
include_directories(${DIR_INC})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src SRC)

add_compile_options(-g -Wall)
add_executable(${PROJECT_NAME} ${SRC})
#add_library(${PROJECT_NAME} <SHARED,STATIC,MODULE>
#    ${SRC}
#)
#target_link_libraries(${PROJECT_NAME} <libs>)
#add_dependencies(${PROJECT_NAME} <libs>)

# tags
set_source_files_properties(tags PROPERTIES GENERATED TRUE)
add_custom_target(tags
    COMMAND ctags -R ${SRC} ${DIR_INC}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
)

endsnippet


#===============================================================================
# block comment
#===============================================================================
snippet cmb "commet = with 1 character"
${1:type}===============================================================================
$1 ${0}
$1===============================================================================
endsnippet

snippet cmb2 "commet = with 2 character"
${1:type}==============================================================================
$1 ${0}
$1==============================================================================
endsnippet

snippet cml "commet ~ with 1 character"
${1:type}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$1 ${0}
$1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
endsnippet

snippet cml2 "commet - with 2 character"
${1:type}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$1 ${0}
$1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
endsnippet


#===============================================================================
#  chars
#===============================================================================
snippet cunicode "some unicode chars"
⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ± · ÷
► ✘ ❖ ▫ ▪ ★ ☆ • ≡ ፨ ♥ → …
                   
endsnippet

snippet cbox "chars for box"
┌─┬─┐
│ │ │
├─┼─┤
└─┴─┘
endsnippet

snippet cbox11 "chars for box ┌"
┌
endsnippet

snippet cbox12 "chars for box ┬"
┬
endsnippet

snippet cbox13 "chars for box ┐"
┐
endsnippet

snippet cbox21 "chars for box ├"
├
endsnippet

snippet cbox22 "chars for box ┼"
┼
endsnippet

snippet cbox23 "chars for box ┤"
┤
endsnippet

snippet cbox31 "chars for box └"
└
endsnippet

snippet cbox32 "chars for box ┴"
┴
endsnippet

snippet cbox33 "chars for box ┘"
┘
endsnippet
