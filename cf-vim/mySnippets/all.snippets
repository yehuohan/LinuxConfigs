
#===============================================================================
# qt project
#===============================================================================
snippet qpro "qmake pro file"
#-------------------------------------------------
#
# Project created by Vim `!v strftime("%Y-%m-%d %X")`
#
#-------------------------------------------------

QT += core gui
greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

CONFIG  += c++11
TEMPLATE = app
DESTDIR = ../
TRANSLATIONS += lang/lang_zh_cn.ts	\
                lang/lang_en.ts

# debug, release, debug_and_release
CONFIG += debug
CONFIG -= release
debug{
    TARGET = ${1:project-name}
}
release {
    TARGET = $1
    DEFINES +=	QT_NO_WARNING_OUTPUT \
                QT_NO_DEBUG_OUTPUT
}

#INCLUDEPATH +=
#LIBS        +=
unix {
    #CONFIG    += link_pkgconfig
    #PKGCONFIG +=
}

SOURCES   += \
    main.cpp
#HEADERS   += .h
#FORMS     += .ui
#RESOURCES += .qrc

endsnippet

snippet qproc "qmake pro console file"
#-------------------------------------------------
#
# Project created by Vim `!v strftime("%Y-%m-%d %X")`
#
#-------------------------------------------------

QT += core
QT -= gui

CONFIG  += c++11 console
TEMPLATE = app
DESTDIR = ../

# debug, release, debug_and_release
CONFIG += debug
CONFIG -= release
debug{
    TARGET = ${1:project-name}
}
release {
    TARGET = $1
    DEFINES +=	QT_NO_WARNING_OUTPUT \
                QT_NO_DEBUG_OUTPUT
}

#INCLUDEPATH +=
#LIBS        +=
unix {
    #CONFIG    += link_pkgconfig
    #PKGCONFIG +=
}

SOURCES   += \
    main.cpp
#HEADERS   += .h

endsnippet

snippet qcpp "qmake pro only for c/c++"
#-------------------------------------------------
#
# Project created by Vim `!v strftime("%Y-%m-%d %X")`
#
#-------------------------------------------------


TEMPLATE = app
CONFIG  -= qt
CONFIG  -= app_bundle
CONFIG  += c++11 console
DESTDIR = ../

# debug, release, debug_and_release
CONFIG += debug
CONFIG -= release
debug{
    TARGET = ${1:project-name}
}
release {
    TARGET = $1
}

#INCLUDEPATH +=
#LIBS        +=
unix {
    #CONFIG    += link_pkgconfig
    #PKGCONFIG +=
}

SOURCES   += \
    main.cpp
#HEADERS   += .h

endsnippet


#===============================================================================
# makefile
#===============================================================================
snippet makf "makefile template"

DIR_INC = ./inc
DIR_SRC = ./src
DIR_OBJ = ./obj
DIR_BIN = ./
DIR_3RD = ./3party
DIR_LIB = ./lib

CC = ${1:g++}
TARGET = ${2:main}

ifeq ($(CC), g++)
CC_SUF = cpp
endif
ifeq ($(CC), gcc)
CC_SUF = c
endif

SRC = $(wildcard ${DIR_SRC}/*.${CC_SUF})
OBJ = $(patsubst %.${CC_SUF},${DIR_OBJ}/%.o,$(notdir ${SRC}))

BIN_TARGET = ${DIR_BIN}/${TARGET}
LDFLAGS = -L${DIR_LIB}
LIBS =
#-lopencv_core -lpthread
PKGFLAGS =
#\`pkg-config opencv --cflags` `pkg-config opencv --libs\`
CXXFLAGS = -g -Wall -I${DIR_INC} -I${DIR_SRC} -I${DIR_3RD} ${PKGFLAGS}


${BIN_TARGET} : ${OBJ}
	$(CC) $(OBJ) -o $@ $(LDFLAGS) $(LIBS)

${DIR_OBJ}/%.o:${DIR_SRC}/%.${CC_SUF}
	$(CC) $(CXXFLAGS) -c $< -o $@

.phony:clean
clean:
	rm ${OBJ}

endsnippet



#===============================================================================
# block comment
#===============================================================================

snippet cmc "comment block for c/cpp"
//==============================================================================
/* ${1:name} */
${0}
/* $1 End */
//==============================================================================
endsnippet

snippet cmv "comment for vim"
"===============================================================================
"${0}
"===============================================================================
endsnippet

snippet cmb "commet block with 1 character"
${1:type}===============================================================================
$1 ${0}
$1===============================================================================
endsnippet

snippet cmb2 "commet block with 2 character"
${1:type}==============================================================================
$1 ${0}
$1==============================================================================
endsnippet
